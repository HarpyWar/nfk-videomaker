using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Threading;
using System.Runtime.InteropServices;
using System.Reflection;
using System.Security.AccessControl;
using System.Security.Principal;
using Helper;

namespace ndm2video
{
    class Program
    {
        static Process nfkProcess;

        /// <summary>
        /// Is movie creation in process?
        /// </summary>
        public static bool movieProcessing = false;

        static FileSystemWatcher watcher;
        /// <summary>
        /// Creation time of last image generated by nfk
        /// </summary>
        static DateTime lastImageTime = DateTime.Now;

        static IntPtr dxWindowHandle; // game process main windows handle
        static ExternalVideoTool ex;

        static void Main(string[] args)
        {
            Config.Load();
            CmdArgs.ParseOptions(args);

            var defaultDemoFile = Path.Combine(Config.BaseNfkPath, Path.Combine("demos", "demo.ndm")); // basenfk\demos\demo.ndm
            var basenfkDemoFile = Path.Combine(Config.BaseNfkPath, Path.Combine("demos", Path.GetFileName(Config.DemoFile))); // basenfk\demos\{DEMOFILE}.ndm

            // copy demo to outside demo directory
            if (File.Exists(Config.DemoFile))
            {
                Log.Info(string.Format("Copy demo {0} -> {1}", Config.DemoFile, defaultDemoFile));
                File.Copy(Config.DemoFile, defaultDemoFile, true);
            }
            else if (File.Exists(basenfkDemoFile))
            {
                Log.Info(string.Format("Copy demo {0} -> {1}", basenfkDemoFile, defaultDemoFile));
                File.Copy(basenfkDemoFile, defaultDemoFile, true);
            }
            else
            {
                Log.Error("Could not file demo in paths: \"{0}\" or \"{1}\"");
                Environment.Exit(1);
            }

            if (!Config.Data.ExternalVideoCapture)
            {
                // remove all images in \basenfk
                Log.Info("Clearing " + Config.BaseNfkPath + " from old images ");
                var files = Directory.GetFiles(Config.BaseNfkPath, "*.jpg");
                foreach (string f in files)
                    File.Delete(f);
            }

            // it creates when game is started
            Log.Info("Remove pid.cfg");
            File.Delete(Path.Combine(Config.BaseNfkPath, "pid.cfg"));

            // write autoexec.cfg
            var sb = new StringBuilder();
            sb.AppendFormat("demo {0}\n", defaultDemoFile);
            sb.AppendFormat("r_mode {0} {1}\n", Config.Data.VideoWidth, Config.Data.VideoHeight); // set nfk window size (it works only in special modified nfk.exe)
            sb.AppendFormat(@"
unbind all
{0}
bind n nextplayer
bind tab scoreboard
writeconfig pid.cfg
", Config.Data.Autoexec.Replace("\n", "\r\n"));
            if (!Config.Data.ExternalVideoCapture)
                sb.Append("\navi_start");
            if (Config.PlayerNumber > 0)
                sb.Append("\ncameratype 1");

            var autoexecFile = Path.Combine(Config.BaseNfkPath, "autoexec.cfg");
            Log.Info("Updating " + autoexecFile);
            File.WriteAllText(autoexecFile, sb.ToString());


            Log.Info("Starting game process: " + Config.Data.GameExeFile);
            if (!File.Exists(Config.Data.GameExeFile))
            {
                Log.Error("Exe file does not exist");
                Environment.Exit(1);
            }
            // run nfk.exe
            nfkProcess = new Process()
            {
                StartInfo = new ProcessStartInfo() {
                    FileName = Config.Data.GameExeFile,
                    WorkingDirectory = Path.GetDirectoryName(Config.Data.GameExeFile),
                }
            };
            try
            {
                nfkProcess.EnableRaisingEvents = true;
                nfkProcess.Exited += nfkProcess_Exited;
                nfkProcess.Start();
            }
            catch(Exception e)
            {
                Log.Error(e.Message);
                Environment.Exit(1);
            }

            // begin watching \besenfk for new images
            watcher = new FileSystemWatcher(Config.BaseNfkPath);
            watcher.EnableRaisingEvents = true;
            watcher.Created += new FileSystemEventHandler(OnImageCreated);

            int hangUpTimes = 0;
            while (true)
            {
                Thread.Sleep(Config.Data.GameProcessTimeout * 1000);

                if (nfkProcess != null && !nfkProcess.HasExited && !nfkProcess.Responding)
                {
                    hangUpTimes++;
                    if (hangUpTimes > 3)
                    {
                        Log.Error("Game process is hang up. Exiting.");
                        KillNFK();
                        Environment.Exit(1);
                    }
                }

                if (!Config.Data.ExternalVideoCapture && !movieProcessing)
                {
                    // if during 5 seconds no spawn of new images then nfk.exe is hang up
                    if ((DateTime.Now.Subtract(lastImageTime)).Seconds > Config.Data.GameProcessTimeout)
                    {
                        Log.Error("Game process is hang up > " + Config.Data.GameProcessTimeout + ". Exiting!");
                        KillNFK();
                        Environment.Exit(1);
                    }
                }
            }
        }

        /// <summary>
        /// Handle when NFK.exe was exited (out/in)side the app
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private static void nfkProcess_Exited(object sender, EventArgs e)
        {
            if (!movieProcessing)
            {
                Log.Error("Game process is crashed");

                // stop watching
                watcher.EnableRaisingEvents = false;
                watcher.Dispose();

                // if NFK.exe was killed from outside just close app with error code
                Environment.Exit(1);
            }
            else
            {
                Log.Info("Result is success. Kill the game process.");
            }
        }

        private static void OnImageCreated(object sender, FileSystemEventArgs e)
        {
            if (e.Name == "pid.cfg")
            {
                Thread.Sleep(2000);

                // set priority and affinity for nfk
                // .. and for current process
                var affinity = int.Parse(Config.Data.ProcessorAffinity);
                if (affinity > 0)
                {
                    nfkProcess.ProcessorAffinity = (IntPtr)affinity;
                    Process.GetCurrentProcess().ProcessorAffinity = (IntPtr)affinity;
                }
                nfkProcess.PriorityClass = (ProcessPriorityClass)Config.Data.ProcessorPriority;
                Process.GetCurrentProcess().PriorityClass = (ProcessPriorityClass)Config.Data.ProcessorPriority;

                // select directx main window
                dxWindowHandle = Win32.FindWindow("Tmainform", "Need For Kill");

                // set on top one time, when first image file is created
                if (Config.Data.AlwaysOnTop)
                    Win32.SetWindowOnTop(dxWindowHandle);

                if (dxWindowHandle == IntPtr.Zero)
                {
                    Log.Error("Could not find main window (Class: \"Tmainform\", Caption: \"Need For Kill\")");
                    Environment.Exit(1);
                }

                if (Config.PlayerNumber > 0)
                {
                    // I don't know why but it should be this!
                    int startPlayerNumber = (Config.Data.ParallelEncoding) ? 0 : 1;
                    // switch player camera
                    for (int i = startPlayerNumber; i < Config.PlayerNumber; i++)
                    {
                        NfkSendKey("n");
                    }
                }
                Thread.Sleep(1000);

                if (Config.Data.ShowScoreBoard)
                {
                    // start scoreboard thread
                    new Thread(scoreThreadDoWork).Start();
                }

                // start record video using external tool here
                if (Config.Data.ExternalVideoCapture)
                {
                    // remove old video file if exist
                    if (File.Exists(Config.VideoFile))
                        File.Delete(Config.VideoFile);

                    ex = new ExternalVideoTool();
                    ex.ExternalToolStart(string.Empty, 0); // start with first round (capture game video)
                }

                return;
            }

            int number;
            int.TryParse(Path.GetFileNameWithoutExtension(e.FullPath), out number);

            // debug
            Console.WriteLine(number);

            lastImageTime = DateTime.Now;

            // kill nfk process if images count above a limitation
            if (number > Config.ImageLimitCount)
            {
                movieProcessing = true;
                KillNFK();

                // and process movie creation
                createMovie();
            }
        }

        private static void createMovie()
        {
            try
            {
                var vm = new VideoMaker(Config.VideoFile);

                // process all images in \basenfk
                var files = Directory.GetFiles(Config.BaseNfkPath, "*.jpg");
                Log.Info(string.Format("Creating video file ({0}) from {1} images...", Config.VideoFile, files.Length));

                foreach (string f in files)
                    using (var bm = new System.Drawing.Bitmap(f))
                        vm.AddFrame(bm);

                vm.SaveAndClose();
            }
            catch(Exception e)
            {
                Log.Info(e.Message);
                Environment.Exit(1);
            }

            endMovieCreation();
        }

        internal static void endMovieCreation()
        {
            // check is movie file created or size < 1MB
            if (!File.Exists(Config.VideoFile) || new FileInfo(Config.VideoFile).Length < (1024 * 1024))
            {
                Log.Error("Movie file was not created " + Config.VideoFile);
                Environment.Exit(1); 
            }

            Log.Info("Well done!");
            Environment.Exit(2); // this is only one valid return code with successfull exit
        }



        private static void NfkSendKey(object keys, bool? down = null)
        {
            for (int i = 0; i < 5; i++)
            {
                Win32.SetForegroundWindow(dxWindowHandle); // set focus several times
                Thread.Sleep(100);
            }

            if (down == null)
                System.Windows.Forms.SendKeys.SendWait(keys.ToString()); // send keys
            else
            {
                if (down == true)
                    new WindowsInput.InputSimulator().Keyboard.KeyDown((WindowsInput.Native.VirtualKeyCode)keys);
                else
                    new WindowsInput.InputSimulator().Keyboard.KeyUp((WindowsInput.Native.VirtualKeyCode)keys);
            }
        }
                            
        [STAThread]
        private static void scoreThreadDoWork()
        {
            Thread.Sleep(5000);

            while(!nfkProcess.HasExited)
            {
                NfkSendKey(WindowsInput.Native.VirtualKeyCode.TAB, true);
                // how long scoreboard should be shown
                Thread.Sleep((int)(Config.Data.ScoreboardDuration * 1000));
                NfkSendKey(WindowsInput.Native.VirtualKeyCode.TAB, false);

                // frequency of show scoreboard
                Thread.Sleep((int)(Config.Data.ScoreboardInterval * 1000));
            }
            try{
                Thread.ResetAbort();
            } catch {}
        }



        internal static void KillNFK()
        {
            try
            {
                // kill nfk.exe by force
                if (!nfkProcess.HasExited)
                    nfkProcess.Kill();
                if (ex != null)
                    ex.Dispose();

                if (Config.Data.ParallelEncoding)
                    Common.freeHangProcesses();
            }
            catch(Exception e)
            {
                Log.Error(e.Message);
            }
        }

        internal static bool IsNFKRunning()
        {
            if (nfkProcess != null && !nfkProcess.HasExited)
                return true;
            return false;
        }
    }
}
