using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Threading;
using System.Runtime.InteropServices;
using System.Reflection;
using System.Security.AccessControl;
using System.Security.Principal;
using Helper;

namespace ndm2mp4
{
    class Program
    {
        static Process nfkProcess;

        /// <summary>
        /// Is movie creation in process?
        /// </summary>
        static bool movieProcessing = false;

        static FileSystemWatcher watcher;
        static System.Timers.Timer timer;
        /// <summary>
        /// Creation time of last image generated by nfk
        /// </summary>
        static DateTime lastImageTime = DateTime.Now;

        static bool isGameRunning = false; // flag the game window is shown

        static IntPtr dxWindowHandle; // game process main windows handle

        static void Main(string[] args)
        {
            Config.Load();
            CmdArgs.ParseOptions(args);

            var defaultDemoFile = Path.Combine(Config.BaseNfkPath, Path.Combine("demos", "demo.ndm")); // basenfk\demos\demo.ndm
            var basenfkDemoFile = Path.Combine(Config.BaseNfkPath, Path.Combine("demos", Path.GetFileName(Config.DemoFile))); // basenfk\demos\{DEMOFILE}.ndm

            // copy demo to outside demo directory
            if (File.Exists(Config.DemoFile))
                File.Copy(Config.DemoFile, defaultDemoFile, true);
            else if (File.Exists(basenfkDemoFile))
                File.Copy(basenfkDemoFile, defaultDemoFile, true);
            else
            {
                Log.Error("Could not file demo in paths: \"{0}\" or \"{1}\"");
                Environment.Exit(1);
            }

            // remove all images in \basenfk
            Log.Info("Clearing "+ Config.BaseNfkPath + " from old images ");
            var files = Directory.GetFiles(Config.BaseNfkPath, "*.jpg");
            foreach (string f in files)
                File.Delete(f);

            // write autoexec.cfg
            var sb = new StringBuilder();
            sb.AppendFormat("demo {0}\n", defaultDemoFile);
            sb.AppendFormat("r_mode {0} {1}", Config.Data.VideoWidth, Config.Data.VideoHeight); // set nfk window size (it works only in special modified nfk.exe)
            sb.AppendFormat(@"
{0}
bind n nextplayer
avi_start
", Config.Data.Autoexec);

            var autoexecFile = Path.Combine(Config.BaseNfkPath, "autoexec.cfg");
            Log.Info("Updating " + autoexecFile);
            File.WriteAllText(autoexecFile, sb.ToString());


            Log.Info("Running nfk process: " + string.Join(" ", args));
            if (!File.Exists(Config.Data.GameExeFile))
            {
                Log.Error("Exe file does not exist");
                Environment.Exit(1);
            }
            // run nfk.exe
            nfkProcess = new Process()
            {
                StartInfo = new ProcessStartInfo() {
                    FileName = Config.Data.GameExeFile,
                    WorkingDirectory = Path.GetDirectoryName(Config.Data.GameExeFile)
                }
            };
            try
            {
                nfkProcess.EnableRaisingEvents = true;
                nfkProcess.Exited += nfkProcess_Exited;
                nfkProcess.Start();

                // set priority and affinity for nfk and current process
                nfkProcess.ProcessorAffinity = Process.GetCurrentProcess().ProcessorAffinity = (IntPtr)Config.Data.ProcessorAffinity;
                nfkProcess.PriorityClass = Process.GetCurrentProcess().PriorityClass = (ProcessPriorityClass)Config.Data.ProcessorPriority;
            }
            catch(Exception e)
            {
                Log.Error(e.Message);
                Environment.Exit(1);
            }

            // begin watching \besenfk for new images
            watcher = new FileSystemWatcher(Config.BaseNfkPath);
            watcher.EnableRaisingEvents = true;
            watcher.Created += new FileSystemEventHandler(OnImageCreated);

            while (true)
            {
                Thread.Sleep(1000);

                if (!movieProcessing)
                {
                    // if during 5 seconds no spawn of new images then nfk.exe is hang up
                    if ((DateTime.Now.Subtract(lastImageTime)).Seconds > Config.Data.GameProcessTimeout)
                    {
                        Log.Error("Game process is hang up > " + Config.Data.GameProcessTimeout + ". Kill it!");
                        nfkProcess.Kill();
                    }
                }
            }
        }

        /// <summary>
        /// Handle when NFK.exe was exited (out/in)side the app
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private static void nfkProcess_Exited(object sender, EventArgs e)
        {
            isGameRunning = false;
            if (!movieProcessing)
            {
                Log.Error("Game process was killed from outside");

                // stop watching
                watcher.EnableRaisingEvents = false;
                watcher.Dispose();

                // if NFK.exe was killed from outside just close app with code return = 1
                Environment.Exit(1);
            }
            else
            {
                Log.Info("Finish generating images => kill the game process.");
            }
        }

        private static void OnImageCreated(object sender, FileSystemEventArgs e)
        {
            if (!isGameRunning)
            {
                // set on top one time, when first image file is created
                if (Config.Data.AlwaysOnTop)
                    Win32.SetWindowOnTop(nfkProcess.MainWindowHandle);

                // select directx main window
                dxWindowHandle = Win32.FindWindow("Tmainform", "Need For Kill");
                if (dxWindowHandle == IntPtr.Zero)
                {
                    Log.Error("Could not find main window (Class: \"Tmainform\", Caption: \"Need For Kill\")");
                    Environment.Exit(1);
                }

                // switch player camera
                for (int i = 1; i < Config.PlayerNumber; i++)
                    NfkSendKey("n");

                isGameRunning = true;

                // start record video here
            }

            int number;
            int.TryParse(Path.GetFileNameWithoutExtension(e.FullPath), out number);

            // debug
            Console.WriteLine(number);

            lastImageTime = DateTime.Now;

            // kill nfk process if images count above a limitation
            if (number > Config.ImageLimitCount)
            {
                movieProcessing = true;
                nfkProcess.Kill();

                // and process movie creation
                createMovie();
            }
        }

        private static void createMovie()
        {
            try
            {
                var vm = new VideoMaker(Config.VideoFile);

                // process all images in \basenfk
                var files = Directory.GetFiles(Config.BaseNfkPath, "*.jpg");
                Log.Info(string.Format("Creating video file ({0}) from {1} images...", Config.VideoFile, files.Length));

                foreach (string f in files)
                    using (var bm = new System.Drawing.Bitmap(f))
                        vm.AddFrame(bm);

                vm.SaveAndClose();
            }
            catch(Exception e)
            {
                Log.Info(e.Message);
                Environment.Exit(1);
            }

            Log.Info("Well done!");
            Environment.Exit(2); // this is only one valid return code with successfull exit
        }


        private static void NfkSendKey(string keys)
        {
            Win32.SetForegroundWindow(dxWindowHandle); // set focus
            System.Windows.Forms.SendKeys.SendWait(keys); // send keys
        }

    }
}
